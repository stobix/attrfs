☐ Have more servers! An attribute server "linked" with an external file server,  an internal file server, with mostly the same API as the external file server (these might even be the same server, or have a common front end). This is to avoid, and handle, race conditions when going parallel.
 The file server should have a receive for all add messages, propagating them to the proper file adding handler.
 There should be several "data bases". Inode will still handle the numbering, but checking if a filename is bound should be handled by the file module that checks the {name,ino} data base.
☑ Change #inode_entry.children to #inode_entry.contents
☑ Put file contents in #inode_entry.contents as a binary

☐ Make it possible to copy files between folders. (Which will mostly be the same as changing attributes for files.)

☐ Add support for moving real files in the real file system by moving files in the real part of the file system. Change names of database entries simultaneously.

☐  Include support for creating files! Nautilus wants to have a .Trash and a .thumbnails directory...    
 ☑  files (in attribute dirs)
 ☑  folders (in attribute dirs)
    folders (in root dir)
    folders (in mirrored dir)
    files (in created dirs in root dir)
    files (in created dirs in mirrored dir)

☐ XXX does dirent_size return the wrong size‽‽ Something with unicode or a newer FUSE thing?

☐ Include support for ignoring (hidden) directories! If there is a .thumbnails folder in several folders, probably none of them should be imported as duplicate-.thumbnails, and they and their content should thus not be movable to the attributes folder.
    
☐ Include support for writing to files
 ☐  mirrored
 ☐  created

☐ Include support for setting multiple attributes at once:
    % attr -s "Foo,Bar" -V "Etaoin" Baz.file
    =>
    % ls attribs -R
    Foo/Etaoin/Baz.file
    Bar/Etaoin/Baz.file


☐ Include support for search directories:
    ☐ Special directories 
        ☑ AND, OR, BUTNOT, 
        ☐ XOR
        ☐ NOT which negates the next folder choise
        ☐ AND<key folder> , BUTNOT <key folder> etc for every value folder.
         ☐ parentheses, to be able to do a/b OR (c/d AND e/f) and such
         ☐ alternatively, include BOTH and EITHER directories whose subdirs only contain AND and OR directories respectively, until one is choosen.
        
        % ls attribs/Foo/Bar
            Etaoin
            Shrdlu
            AND
            ...
        % ls attribs/Foo/Baz
            Blah
            Shrdlu
            AND
            ...
        % ls attribs/Foo/Baz/AND/Foo/Bar
            Shrdlu
            AND
            ...

    ☐ A new root directory tree for "search dirs" with special syntax:
        ☐ (Foo/Bar & Foo/Baz) | (Etaoin/(Shrdlu & Foo)|Blah/*)
        ☐ Regex?


    ☐ Different logic dirs for different levels of attribute dirs. *BEGUN*


☐ make one able to remove attribute key directories

☐ make setxattr unset old attribute value folders when adding new ones.

☐ make the dir functions context sensitive.
    different users shown different context, different users have different rights...
☐ make all applicable functions context sensitive.
☐ have different attribute folders for different users? different groups? different users or group according to mode?
☐ Use CTX as an index for accessing attributes?

☐ check if the OS tries to copy a file unto itself (from a real dir to an attribute dir). 
  This copying is to be "ignored", that is, regarded as a rename operation, which is the same as hard linking, also for dirs. Touching or movin the file should be regarded as the same as copying in this FS.


☐ Make a way to "reload" the directory we're mirroring from.
☐ Support mirroring from multiple directories.
  Dynamic mirroring! attrfs:set_dirs(["foo","bar"]) or something similar, perhaps?

☑  Detect duplicates in the folder(s) to mirror.
  * note as folders under /duplicates ?
    /duplicates/foo.file/paths.txt or something like it.
  * show duplicate files as a special type of folder?

☐ åäö is (probably) broken. UTF-8 support broken? Am I using strings instead of binaries or something?


☐ what is wrong with the logical subdirs? Do I point sequentially all the way down to the original, or do I point directly to the original from all? The processing is way too slow, anyhow.

